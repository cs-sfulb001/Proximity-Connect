import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material.Button
import androidx.compose.material.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import java.util.*

// Define data class representing each entry in the transcript
data class TranscriptEntry(val sentence: String, var flagged: Boolean = false)

@Composable
fun DisplayTranscript(transcript: List<TranscriptEntry>, onFlagAdded: (Int) -> Unit) {
    Column(
        modifier = Modifier.fillMaxSize().padding(16.dp),
        horizontalAlignment = Alignment.Start
    ) {
        transcript.forEachIndexed { index, entry ->
            TranscriptEntryRow(entry, index + 1, onFlagAdded)
        }
    }
}

@Composable
fun TranscriptEntryRow(entry: TranscriptEntry, lineNumber: Int, onFlagAdded: (Int) -> Unit) {
    Row {
        Text(text = "$lineNumber: ${entry.sentence}")
        if (!entry.flagged) {
            Button(
                onClick = { onFlagAdded(lineNumber) },
                modifier = Modifier.padding(start = 8.dp)
            ) {
                Text("Add Flag")
            }
        }
    }
}

@Composable
fun TranscriptScreen(transcript: List<TranscriptEntry>) {
    var flaggedLineNumbers by remember { mutableStateOf(emptyList<Int>()) }

    DisplayTranscript(transcript = transcript) { lineNumber ->
        flaggedLineNumbers += lineNumber
    }

    if (flaggedLineNumbers.isNotEmpty()) {
        FlaggedMessages(flaggedLineNumbers = flaggedLineNumbers, transcript = transcript)
    }
}

@Composable
fun FlaggedMessages(flaggedLineNumbers: List<Int>, transcript: List<TranscriptEntry>) {
    Column(
        modifier = Modifier.fillMaxSize().padding(16.dp),
        horizontalAlignment = Alignment.Start
    ) {
        Text("Flagged Messages:")
        flaggedLineNumbers.forEach { lineNumber ->
            val entry = transcript[lineNumber - 1]
            Text(text = "$lineNumber: ${entry.sentence}")
        }
    }
}