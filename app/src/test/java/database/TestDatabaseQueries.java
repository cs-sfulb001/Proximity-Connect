/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package database;

import java.sql.*;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.hamcrest.MatcherAssert.assertThat; 
import static org.hamcrest.Matchers.*;

public class TestDatabaseQueries {
    static DatabaseQueries Object = new DatabaseQueries();
    @Test public void testNextUserID(){
        //Object.fillSampleData(); 
        assertThat(Object.getNextUserID(), is(not(equalTo(-1))));
        int user_id = Object.getNextUserID();
        String username = "test";
        String password = "password";
        String datecreated = "2024-02-11";
        Object.AddUser(user_id, username, password, datecreated);
        int nextID = Object.getNextUserID();
        try{
            Object.PCDatabase.createStatement().execute("delete from users where user_id="+user_id);
        }
        catch(Exception e){
            System.out.println("testNextUserID Error:\n    "+e);
        }
        assertEquals(user_id+1, nextID);
    }
    @Test public void testNextGroupID(){
        int group_id = Object.nextGroupID();
        assertThat(group_id, is(not(equalTo(-1))));
        int user_id = Object.nextGroupID();
        String username = "test";
        String password = "password";
        String datecreated = "2024-02-11";
        Object.AddUser(user_id, username, password, datecreated);
        String group_name = "test";
        Object.CreateGroup(group_id, group_name, user_id);
        int nextID = Object.nextGroupID();
        try{
            Object.PCDatabase.createStatement().execute("delete from users where user_id="+user_id);
        }
        catch(Exception e){
            System.out.println("testNextUserID Error:\n    "+e);
        }
        assertEquals(group_id+1, nextID);
    }
    @Test public void testCreateGroup(){
        int group_id = Object.nextGroupID();
        assertThat(group_id, is(not(equalTo(-1))));
        int user_id = Object.getNextUserID();
        String username = "test";
        String password = "password";
        String datecreated = "2024-02-11";
        Object.AddUser(user_id, username, password, datecreated);
        String group_name = "test";
        Object.CreateGroup(group_id, group_name, user_id);
        String Storedgroup_name = "";
        int group_Creator = -1;
        try{
            ResultSet GroupQuery = Object.PCDatabase.createStatement().executeQuery("select * from user_group where group_id="+group_id);
            GroupQuery.next();
            Storedgroup_name=GroupQuery.getString("group_name");
            group_Creator=GroupQuery.getInt("group_creator");
            Object.PCDatabase.createStatement().execute("delete from users where user_id="+user_id);
        }
        catch(Exception e){
            System.out.println("testNextUserID Error:\n    "+e);
        }
        assertEquals(group_name, Storedgroup_name);
        assertEquals(user_id, group_Creator);
    }
    @Test public void testAddUser(){
        int user_id = Object.getNextUserID();
        String username = "test";
        String password = "password";
        String datecreated = "2024-02-11";
        Object.AddUser(user_id, username, password, datecreated);
        int TestID = -1;
        String testUN = "";
        String testPW = "";
        String testDate = "";
        String defaultFName="";
        String defaultLName="";
        String defaultUIColor="";
        String defaultFont="";
        String defaultPP="";
        String defaultPrimaryLanguage="";
        try{
            ResultSet newUser = Object.PCDatabase.createStatement().executeQuery("select * from users where user_id="+user_id);
            newUser.next();
            testUN = newUser.getString("username");
            testPW = newUser.getString("user_password");
            testDate = newUser.getString("created_at");
            ResultSet defaultSettings = Object.PCDatabase.createStatement().executeQuery("select * from user_settings where user_id="+user_id);
            defaultSettings.next();
            defaultFName = defaultSettings.getString("first_name");
            defaultLName = defaultSettings.getString("last_name");
            defaultUIColor = defaultSettings.getString("UI_Color");
            defaultFont = defaultSettings.getString("UI_Font");
            defaultPP = defaultSettings.getString("profile_picture");
            defaultPrimaryLanguage = defaultSettings.getString("primary_language");
            Object.PCDatabase.createStatement().execute("delete from users where user_id="+user_id);
        }
        catch(Exception e){
            System.out.println("testAddUser Error:\n    "+e);
        }
        assertEquals(username, testUN);
        assertEquals(password, testPW);
        assertEquals(datecreated, testDate);
        assertEquals("FirstName", defaultFName);
        assertEquals( "LastName", defaultLName);
        assertEquals(null, defaultPP);
        assertEquals("English", defaultPrimaryLanguage);
        assertEquals("Times New Roman", defaultFont);
        assertEquals("(255, 255, 255)", defaultUIColor);
    }
    @Test public void testLogin(){//Make sure Usernames are unique
        int user_id = Object.getNextUserID();
        String username = "test";
        String password = "password";
        String datecreated = "2024-02-11";
        Object.AddUser(user_id, username, password, datecreated);
        int loginID = Object.Login(user_id, password);
        String testUN = "";
        String testPW = "";
        String testDate = "";
        try{
            ResultSet newUser = Object.PCDatabase.createStatement().executeQuery("select * from users where user_id="+loginID);
            newUser.next();
            testUN = newUser.getString("username");
            testPW = newUser.getString("user_password");
            testDate = newUser.getString("created_at");
            Object.PCDatabase.createStatement().execute("delete from users where user_id="+user_id);
        }
        catch(Exception e){
            System.out.println("testLogin Error:\n    "+e);
        }
        assertEquals(user_id, loginID);
        assertEquals(username, testUN);
        assertEquals(password, testPW);
        assertEquals(datecreated, testDate);
    }
    @Test public void testUpdatePassword(){
        int user_id = Object.getNextUserID();
        String username = "test";
        String password = "password";
        String datecreated = "2024-02-11";
        Object.AddUser(user_id, username, password, datecreated);
        String newpassword = "1234";
        Object.updatePassword(user_id, password, newpassword);
        int TestID = -1;
        String testUN = "";
        String testPW = "";
        String testDate = "";
        try{
            ResultSet newUser = Object.PCDatabase.createStatement().executeQuery("select * from users where user_id="+user_id);
            newUser.next();
            TestID = newUser.getInt("user_id");
            testUN = newUser.getString("username");
            testPW = newUser.getString("user_password");
            testDate = newUser.getString("created_at");
            Object.PCDatabase.createStatement().execute("delete from users where user_id="+user_id);
        }
        catch(Exception e){
            System.out.println("testUpdatePassword Error:\n    "+e);
        }
        assertEquals(user_id, user_id);
        assertEquals(username, testUN);
        assertEquals(newpassword, testPW);
        assertEquals(datecreated, testDate);
    }
    @Test public void testUpdateUserSettings(){
        int user_id = Object.getNextUserID();
        String username = "test";
        String password = "password";
        String datecreated = "2024-02-11";
        Object.AddUser(user_id, username, password, datecreated);
        String newFName="Pine";
        String newLName="Apple";
        String newUIColor="(0, 255, 0)";
        String newFont="Comic Sans";
        String newPrimaryLanguage="Spanish";
        Object.updateUserSettings(user_id, newUIColor, newFont, newFName, newLName, newPrimaryLanguage);
        String storedFName="";
        String storedLName="";
        String storedUIColor="";
        String storedFont="";
        String storedPP="";
        String storedPrimaryLanguage="";
        try{
            ResultSet Settings = Object.PCDatabase.createStatement().executeQuery("select * from user_settings where user_id="+user_id);
            Settings.next();
            storedFName = Settings.getString("first_name");
            storedLName = Settings.getString("last_name");
            storedUIColor = Settings.getString("UI_Color");
            storedFont = Settings.getString("UI_Font");
            storedPP = Settings.getString("profile_picture");
            storedPrimaryLanguage = Settings.getString("primary_language");
            Object.PCDatabase.createStatement().execute("delete from users where user_id="+user_id);
        }
        catch(Exception e){
            System.out.println("testUpdateUserSettings Error:\n    "+e);
        }
        assertEquals(newFName, storedFName);
        assertEquals( newLName, storedLName);
        assertEquals(null, storedPP);
        assertEquals(newPrimaryLanguage, storedPrimaryLanguage);
        assertEquals(newFont, storedFont);
        assertEquals(newUIColor, storedUIColor);
    }
    @Test public void testAddGroupMember(){
        int user_id = Object.getNextUserID();
        String username = "test";
        String password = "password";
        String datecreated = "2024-02-11";
        Object.AddUser(user_id, username, password, datecreated);
        int user_id2 = Object.getNextUserID();
        String username2 = "test2";
        String password2 = "password";
        String datecreated2 = "2024-02-11";
        Object.AddUser(user_id2, username2, password2, datecreated2);
        int group_id = Object.nextGroupID();
        String group_name = "test";
        Object.CreateGroup(group_id, group_name, user_id);
        int storedGroup=-1;
        Object.addGroupMember(group_id, user_id2);
        int storedMember1=-1;
        int storedMember2=-1;
        try{
            ResultSet Groups = Object.PCDatabase.createStatement().executeQuery("select * from user_group where group_creator="+user_id);
            Groups.next();
            storedGroup=Groups.getInt("group_id");
            ResultSet Members = Object.PCDatabase.createStatement().executeQuery("select * from group_members where group_id="+group_id);
            Members.next();
            storedMember1=Members.getInt("user_id");
            Members.next();
            storedMember2=Members.getInt("user_id");
            Object.PCDatabase.createStatement().execute("delete from users where user_id="+user_id);
            Object.PCDatabase.createStatement().execute("delete from users where user_id="+user_id2);
        }
        catch(Exception e){
            System.out.println("testAddGroupMember Error:\n    "+e);
        }
        assertEquals(group_id, storedGroup);
        assertEquals(user_id, storedMember1);
        assertEquals(user_id2, storedMember2);
    }
    @Test public void testGetGroups(){
        int user_id = Object.getNextUserID();
        String username = "test";
        String password = "password";
        String datecreated = "2024-02-11";
        Object.AddUser(user_id, username, password, datecreated);
        int user_id2 = Object.getNextUserID();
        String username2 = "test2";
        Object.AddUser(user_id2, username2, password, datecreated);
        int user_id3 = Object.getNextUserID();
        String username3 = "test3";
        Object.AddUser(user_id3, username3, password, datecreated);
        int group_id = Object.nextGroupID();
        String group_name = "test";
        Object.CreateGroup(group_id, group_name, user_id);
        int group_id2 = Object.nextGroupID();
        String group_name2 = "test2";
        Object.CreateGroup(group_id2, group_name2, user_id2);
        Object.addGroupMember(group_id, user_id3);
        Object.addGroupMember(group_id2, user_id3);
        int[] groups=Object.getGroups(user_id3);
        try{
            Object.PCDatabase.createStatement().execute("delete from users where user_id="+user_id);
            Object.PCDatabase.createStatement().execute("delete from users where user_id="+user_id2);
            Object.PCDatabase.createStatement().execute("delete from users where user_id="+user_id3);
        }
        catch(Exception e){
            System.out.println("testAddGroupMember Error:\n    "+e);
        }
        assertEquals(group_id, groups[0]);
        assertEquals(group_id2, groups[1]);
    }
    @Test public void testGetGroupMembers(){
        int user_id = Object.getNextUserID();
        String username = "test";
        String password = "password";
        String datecreated = "2024-02-11";
        Object.AddUser(user_id, username, password, datecreated);
        int user_id2 = Object.getNextUserID();
        String username2 = "test2";
        Object.AddUser(user_id2, username2, password, datecreated);
        int user_id3 = Object.getNextUserID();
        String username3 = "test3";
        Object.AddUser(user_id3, username3, password, datecreated);
        int group_id = Object.nextGroupID();
        String group_name = "test";
        Object.CreateGroup(group_id, group_name, user_id);
        Object.addGroupMember(group_id, user_id2);
        Object.addGroupMember(group_id, user_id3);
        int[] members=Object.getGroupMembers(group_id);
        try{
            Object.PCDatabase.createStatement().execute("delete from users where user_id="+user_id);
            Object.PCDatabase.createStatement().execute("delete from users where user_id="+user_id2);
            Object.PCDatabase.createStatement().execute("delete from users where user_id="+user_id3);
        }
        catch(Exception e){
            System.out.println("testAddGroupMember Error:\n    "+e);
        }
        assertEquals(user_id, members[0]);
        assertEquals(user_id2, members[1]);
        assertEquals(user_id3, members[2]);
    }
    @Test public void testCreateMeeting(){
        int group_id = Object.nextGroupID();
        assertThat(group_id, is(not(equalTo(-1))));
        int user_id = Object.getNextUserID();
        String username = "test";
        String password = "password";
        String datecreated = "2024-02-11";
        Object.AddUser(user_id, username, password, datecreated);
        String group_name = "test";
        Object.CreateGroup(group_id, group_name, user_id);
        int meeting_id = Object.getNextMeetingID();
        String meeting_name = "Test Meeting";
        String meeting_datetime = "2024-03-03 12:47:32";
        boolean shareable = false;
        Object.CreateMeeting(meeting_id, group_id, meeting_name, meeting_datetime, shareable);
        int storedGroup = -1;
        String storedMeeting_name = "";
        String storedMeeting_datetime = "";
        boolean storedShareable = true;
        try{
            ResultSet meeting = Object.PCDatabase.createStatement().executeQuery("select * from group_meetings where meeting_id="+meeting_id);
            meeting.next();
            storedGroup = meeting.getInt("group_id");
            storedMeeting_name = meeting.getString("meeting_name");
            storedMeeting_datetime = meeting.getString("meeting_date");
            storedShareable = meeting.getBoolean("shareable");
            Object.PCDatabase.createStatement().execute("delete from users where user_id="+user_id);
        }
        catch(Exception e){
            System.out.println("testAddGroupMember Error:\n    "+e);
        }
        assertEquals(group_id, storedGroup);
        assertEquals(meeting_name, storedMeeting_name);
        assertEquals(meeting_datetime, storedMeeting_datetime);
        assertEquals(shareable, storedShareable);
    }
    @Test public void testGetGroupMeetings(){
        int group_id = Object.nextGroupID();
        int user_id = Object.getNextUserID();
        String username = "test";
        String password = "password";
        String datecreated = "2024-02-11";
        Object.AddUser(user_id, username, password, datecreated);
        String group_name = "test";
        Object.CreateGroup(group_id, group_name, user_id);
        String meeting_name = "Test Meeting";
        String meeting_datetime = "2024-03-03 12:47:32";
        boolean shareable = false;
        int meeting_id = Object.getNextMeetingID();
        Object.CreateMeeting(meeting_id, group_id, meeting_name, meeting_datetime, shareable);
        int meeting_id2 = Object.getNextMeetingID();
        Object.CreateMeeting(meeting_id2, group_id, meeting_name, meeting_datetime, shareable);
        int[] storedMeetings = Object.getGroupMeetings(group_id);
        try{
            Object.PCDatabase.createStatement().execute("delete from users where user_id="+user_id);
        }
        catch(Exception e){
            System.out.println("testAddGroupMember Error:\n    "+e);
        }
        assertEquals(meeting_id, storedMeetings[0]);
        assertEquals(meeting_id2, storedMeetings[1]);
    }
    @Test public void testCreateMessage(){
        int group_id = Object.nextGroupID();
        int user_id = Object.getNextUserID();
        String username = "test";
        String password = "password";
        String datecreated = "2024-02-11";
        Object.AddUser(user_id, username, password, datecreated);
        String group_name = "test";
        Object.CreateGroup(group_id, group_name, user_id);
        String meeting_name = "Test Meeting";
        String meeting_datetime = "2024-03-03 12:47:32";
        boolean shareable = false;
        int meeting_id = Object.getNextMeetingID();
        Object.CreateMeeting(meeting_id, group_id, meeting_name, meeting_datetime, shareable);
        String message = "This is a test message that should not be bound by length in theory. Lets test that theory and see if this will fit.";
        int message_id = Object.getNextMessageID(meeting_id);
        String message_datetime = "2024-03-03 13:48:05";
        boolean pinned = false;
        Object.createMessage(user_id, meeting_id, message_id, message, message_datetime, pinned);
        int storedUser=-1;
        String storedMessage ="";
        String stored_datetime="";
        boolean stored_pinned = true;
        try{
            ResultSet results=Object.PCDatabase.createStatement().executeQuery("select * from messages where message_id="+message_id+" and meeting_id="+meeting_id);
            results.next();
            storedUser=results.getInt("user_id");
            storedMessage = results.getString("Body");
            stored_datetime = results.getString("created_at");
            stored_pinned = results.getBoolean("pinned");
            Object.PCDatabase.createStatement().execute("delete from users where user_id="+user_id);
        }
        catch(Exception e){
            System.out.println("testAddGroupMember Error:\n    "+e);
        }
        assertEquals(user_id, storedUser);
        assertEquals(message, storedMessage);
        assertEquals(message_datetime, stored_datetime);
        assertEquals(pinned, stored_pinned);
    }
}
